# Set up protocol confirmation/rejection for analyzers, as well as any further
# Zeek-specific analysis.

module Zeek_RESP;

import RESP;
import zeek;

# Any error bubbling up to the top unit will trigger a protocol rejection.
on RESP::Data::%done {
    zeek::confirm_protocol();
}

on RESP::Data::%error {
    zeek::reject_protocol("error while parsing RESP data");
}

type Command = enum {
    SET,
    GET,
    PUBLISH,
    SUBSCRIBE,
};

public function command_from(arr: RESP::Array): optional<Command> {
    if (arr.num_elements < 1)
        return Null;

    local first = arr.elements[0];
    if (!first?.bulk_string)
        return Null;

    local cmd_bytes = first.bulk_string.content;

    local cmd: optional<Command> = Null;
    switch (cmd_bytes.lower()) {
        case b"set": cmd = Command::SET;
        case b"get": cmd = Command::GET;
        case b"publish": cmd = Command::PUBLISH;
        case b"subscribe": cmd = Command::SUBSCRIBE;
        default: cmd = Null;
    }

    return cmd;
}

type Set = tuple<
    # key
    bytes,
    # value
    bytes,
    # NX
    bool,
    # XX
    bool,
    # GET
    bool,
    # EX
    optional<uint64>,
    # PX
    optional<uint64>,
    # EXAT
    optional<uint64>,
    # PXAT
    optional<uint64>,
    # KEEPTTL
    bool,
>;

public function make_set(arr: RESP::Array): Set {
    assert arr.num_elements >= 3 : "Must have at least 3 elements in SET";
    local key = arr.elements[1].bulk_string.content;
    local value = arr.elements[2].bulk_string.content;
    local nx = False;
    local xx = False;
    local get = False;
    local ex: optional<uint64> = Null;
    local px: optional<uint64> = Null;
    local exat: optional<uint64> = Null;
    local pxat: optional<uint64> = Null;
    local keep_ttl = False;
    local i = 3;
    local elements = cast<uint64>(arr.num_elements);
    while ( i < elements ) {
        # All array elements in a command will be a bulk string by default
        if ( ! arr.elements[i]?.bulk_string ) {
            ++i;
            continue;
        }

        local content = arr.elements[i].bulk_string.content;
        switch (content.lower()) {
            case b"nx": nx = True;
            case b"xx": xx = True;
            case b"get": get = True;
            case b"ex": {
                ++i;
                if ( i >= elements || ! arr.elements[i]?.bulk_string )
                    break;
                local inner = arr.elements[i].bulk_string.content;
                ex = inner.to_uint();
            }
            case b"px": {
                ++i;
                if ( i >= elements || ! arr.elements[i]?.bulk_string )
                    break;
                local inner = arr.elements[i].bulk_string.content;
                px = inner.to_uint();
            }
            case b"exat": {
                ++i;
                if ( i >= elements || ! arr.elements[i]?.bulk_string )
                    break;
                local inner = arr.elements[i].bulk_string.content;
                exat = inner.to_uint();
            }
            case b"pxat": {
                ++i;
                if ( i >= elements || ! arr.elements[i]?.bulk_string )
                    break;
                local inner = arr.elements[i].bulk_string.content;
                pxat = inner.to_uint();
            }
            case b"keepttl": keep_ttl = True;
            default: ();
        }

        ++i;
    }
    return (key, value, nx, xx, get, ex, px, exat, pxat, keep_ttl);
}

# Convenience method to avoid comparison with an optional in the evt
public function is_set(arr: RESP::Array): bool {
    # SET key value
    if (arr.num_elements < 3)
        return False;
    local cmd = command_from(arr);
    return cmd && (*cmd == Command::SET);
}

type Get = tuple<bytes>;

public function make_get(arr: RESP::Array): Get {
    return (arr.elements[1].bulk_string.content, );
}

# Convenience method to avoid comparison with an optional in the evt
public function is_get(arr: RESP::Array): bool {
    # GET key
    if (arr.num_elements != 2)
        return False;
    local cmd = command_from(arr);
    return cmd && (*cmd == Command::GET);
}

type Publish = tuple<
    bytes,
    bytes,
>;

public function make_publish(arr: RESP::Array): Publish {
    return (arr.elements[1].bulk_string.content, arr.elements[2].bulk_string.content);
}

public function is_publish(arr: RESP::Array): bool {
    # PUBLISH channel message
    if (arr.num_elements < 3)
        return False;
    local cmd = command_from(arr);
    return cmd && (*cmd == Command::PUBLISH);
}

type Subscribe = tuple<bytes>;

public function make_subscribe(arr: RESP::Array): Subscribe {
    return (arr.elements[1].bulk_string.content, );
}

public function is_subscribe(arr: RESP::Array): bool {
    # SUBSCRIBE channel
    if (arr.num_elements < 2)
        return False;
    local cmd = command_from(arr);
    return cmd && (*cmd == Command::SUBSCRIBE);
}
